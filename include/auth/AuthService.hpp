#pragma once

#include <string>
#include <optional>
#include <memory>

#include "utils/Config.hpp"
#include "http/HttpClient.hpp"

enum class Permission {
    NONE = 0,
    ADMIN = 2,
    MANAGE_SETTINGS = 4,
    MANAGE_USERS = 8,
    MANAGE_REQUESTS = 16,
    REQUEST = 32,
    VOTE = 64,
    AUTO_APPROVE = 128,
    AUTO_APPROVE_MOVIE = 256,
    AUTO_APPROVE_TV = 512,
    REQUEST_4K = 1024,
    REQUEST_4K_MOVIE = 2048,
    REQUEST_4K_TV = 4096,
    REQUEST_ADVANCED = 8192,
    REQUEST_VIEW = 16384,
    AUTO_APPROVE_4K = 32768,
    AUTO_APPROVE_4K_MOVIE = 65536,
    AUTO_APPROVE_4K_TV = 131072,
    REQUEST_MOVIE = 262144,
    REQUEST_TV = 524288,
    MANAGE_ISSUES = 1048576,
    VIEW_ISSUES = 2097152,
    CREATE_ISSUES = 4194304,
    AUTO_REQUEST = 8388608,
    AUTO_REQUEST_MOVIE = 16777216,
    AUTO_REQUEST_TV = 33554432,
    RECENT_VIEW = 67108864,
    WATCHLIST_VIEW = 134217728,
    MANAGE_BLACKLIST = 268435456,
    VIEW_BLACKLIST = 1073741824,
};

class AuthService {
public:
    AuthService(std::shared_ptr<HttpClient> client, const std::string& serverUrl);

    bool loginWithJellyfin(const std::string& username, const std::string& password);
    bool loginWithLocal(const std::string& username, const std::string& password);

    // Plex login is a special case where we don't use a username/password
    // but rather a token that is generated by the Plex server.
    // This method will attempt to login using the provided token.
    // If the token is valid, it will set the current user and return true.
    // If the token is invalid, it will return false.
    bool loginWithPlex();
    bool tryLoginFromCookies(const std::string& username);

    void logout();
    bool isLoggedIn();


    std::string getServerUrl() const {
        return serverUrl;
    }

    int getUserId() const { return currentUser.id; }

    bool getAdvancedRequest() const { return advancedRequest; }
    std::vector<Permission> getUserPermissions() const { return userPermissions; }
private:
    bool advancedRequest = false;
    std::vector<Permission> userPermissions;

    std::shared_ptr<HttpClient> client;
    std::string serverUrl;
    std::string getCookieFilePath(const std::string& username) const;
    void setupCookieFileForUser(const std::string& username);
    AppUser currentUser;
    bool isTokenValid() const;

    void extractPermissions(int permissionValue);
};