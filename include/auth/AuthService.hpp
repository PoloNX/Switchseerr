#pragma once

#include <string>
#include <optional>
#include <memory>

#include "utils/Config.hpp"
#include "http/HttpClient.hpp"

class AuthService {
public:
    AuthService(std::shared_ptr<HttpClient> client, const std::string& serverUrl);

    bool loginWithJellyfin(const std::string& username, const std::string& password);
    bool loginWithLocal(const std::string& username, const std::string& password);

    // Plex login is a special case where we don't use a username/password
    // but rather a token that is generated by the Plex server.
    // This method will attempt to login using the provided token.
    // If the token is valid, it will set the current user and return true.
    // If the token is invalid, it will return false.
    bool loginWithPlex();
    bool tryLoginFromCookies(const std::string& username);

    void logout();
    bool isLoggedIn();


    std::string getServerUrl() const {
        return serverUrl;
    }

    int getUserId() const { return currentUser.id; }

private:
    std::shared_ptr<HttpClient> client;
    std::string serverUrl;
    std::string getCookieFilePath(const std::string& username) const;
    void setupCookieFileForUser(const std::string& username);
    AppUser currentUser;
    bool isTokenValid() const;
};